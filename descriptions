#==================================================================
#          Diehard Overlapping 5-Permutations Test.
# This is the OPERM5 test.  It looks at a sequence of one mill- 
# ion 32-bit random integers.  Each set of five consecutive     
# integers can be in one of 120 states, for the 5! possible or- 
# derings of five numbers.  Thus the 5th, 6th, 7th,...numbers   
# each provide a state. As many thousands of state transitions  
# are observed,  cumulative counts are made of the number of    
# occurences of each state.  Then the quadratic form in the     
# weak inverse of the 120x120 covariance matrix yields a test   
# equivalent to the likelihood ratio test that the 120 cell     
# counts came from the specified (asymptotically) normal dis-   
# tribution with the specified 120x120 covariance matrix (with  
# rank 99).  This version uses 1,000,000 integers, twice.       
#
# Note that Dieharder runs the test 100 times, not twice, by
# default.
#==================================================================

#==================================================================
#                    Diehard Runs Test
#  This is the RUNS test.  It counts runs up, and runs down, 
# in a sequence of uniform [0,1) variables, obtained by float-  
# ing the 32-bit integers in the specified file. This example   
# shows how runs are counted:  .123,.357,.789,.425,.224,.416,.95
# contains an up-run of length 3, a down-run of length 2 and an 
# up-run of (at least) 2, depending on the next values.  The    
# covariance matrices for the runs-up and runs-down are well    
# known, leading to chisquare tests for quadratic forms in the  
# weak inverses of the covariance matrices.  Runs are counted   
# for sequences of length 10,000.  This is done ten times. Then 
# repeated.                                                     
#
# In Dieharder sequences of length tsamples = 100000 are used by
# default, and 100 p-values thus generated are used in a final
# KS test.
#==================================================================

#========================================================================
#                       RGB Permutations Test
# This is a non-overlapping test that simply counts order permutations of
# random numbers, pulled out n at a time.  There are n! permutations
# and all are equally likely.  The samples are independent, so one can
# do a simple chisq test on the count vector with n! - 1 degrees of
# freedom.  This is a poor-man's version of the overlapping permutations
# tests, which are much more difficult because of the covariance of the
# overlapping samples.
#

#==================================================================
#                DAB Fill Tree Test
# This test fills small binary trees of fixed depth with
# words from the the RNG.  When a word cannot be inserted
# into the tree, the current count of words in the tree is
# recorded, along with the position at which the word
# would have been inserted.
#
# The words from the RNG are rotated (in long cycles) to
# better detect RNGs that may bias only the high, middle,
# or low bytes.
#
# The test returns two p-values.  The first is a Pearson
# chi-sq test against the expected values (which were
# estimated empirically).  The second is a Pearson chi-sq
# test for a uniform distribution of the positions at
# which the insert failed.
#
# Because of the target data for the first p-value,
# ntuple must be kept at the default (32).
#==================================================================
